[
  {
    "objectID": "despliegue.html",
    "href": "despliegue.html",
    "title": "Despliegue",
    "section": "",
    "text": "El desarrollo del proyecto de Chatbot siguió un enfoque iterativo, basado en los principios del ciclo CRISP-DM. Esta metodología estructurada permitió abordar las distintas fases del proyecto de manera organizada, con un énfasis continuo en la mejora del diseño, la calidad del código y, fundamentalmente, el rendimiento del sistema en sus componentes clave.\nLos principales retos se concentraron en la fase de extracción, manipulación y estructuración de los datos, con el objetivo de mantenerlos lo más tidy posible y así garantizar una mayor precisión y coherencia en las respuestas generadas por el sistema.\nA lo largo de los ciclos de desarrollo, se han cumplido los hitos establecidos, manteniendo un ritmo de trabajo adecuado. La fase de evaluación, aunque continua, ha mostrado resultados prometedores que sugieren que el sistema, en su estado actual, posee la robustez necesaria para avanzar a una etapa de prueba en un entorno controlado y, aunque sea de pruebas, real.\n\n\nConsiderando los avances y los aprendizajes obtenidos, se evaluaron dos opciones principales para la continuación del proyecto:\n\nContinuar en fases de desarrollo/modelado: Dedicar más tiempo a la refinación interna de los datos, explorar técnicas avanzadas de preprocesamiento, o actualizar versiones de modelos y librerías principales.\nPasar a la fase de implementación en un entorno de prueba: Desplegar el sistema en un entorno controlado que simule las condiciones de uso real, permitiendo obtener feedback directo y validar el comportamiento del chatbot en interacción con usuarios y la infraestructura existente.\n\n\n\n\nSe ha decidido priorizar la implementación en la página de pruebas de la empresa. Esta decisión se fundamenta en la necesidad de validar el sistema en un entorno lo más cercano posible a producción, identificar rápidamente fallos en la integración, la experiencia del usuario, y orientar los ciclos de mejora futuros con base en datos de uso real. La implementación en pruebas servirá como una plataforma funcional sobre la cual se podrá continuar iterando y perfeccionando la solución de manera incremental."
  },
  {
    "objectID": "despliegue.html#revisión-del-proceso",
    "href": "despliegue.html#revisión-del-proceso",
    "title": "Despliegue",
    "section": "",
    "text": "El desarrollo del proyecto de Chatbot siguió un enfoque iterativo, basado en los principios del ciclo CRISP-DM. Esta metodología estructurada permitió abordar las distintas fases del proyecto de manera organizada, con un énfasis continuo en la mejora del diseño, la calidad del código y, fundamentalmente, el rendimiento del sistema en sus componentes clave.\nLos principales retos se concentraron en la fase de extracción, manipulación y estructuración de los datos, con el objetivo de mantenerlos lo más tidy posible y así garantizar una mayor precisión y coherencia en las respuestas generadas por el sistema.\nA lo largo de los ciclos de desarrollo, se han cumplido los hitos establecidos, manteniendo un ritmo de trabajo adecuado. La fase de evaluación, aunque continua, ha mostrado resultados prometedores que sugieren que el sistema, en su estado actual, posee la robustez necesaria para avanzar a una etapa de prueba en un entorno controlado y, aunque sea de pruebas, real.\n\n\nConsiderando los avances y los aprendizajes obtenidos, se evaluaron dos opciones principales para la continuación del proyecto:\n\nContinuar en fases de desarrollo/modelado: Dedicar más tiempo a la refinación interna de los datos, explorar técnicas avanzadas de preprocesamiento, o actualizar versiones de modelos y librerías principales.\nPasar a la fase de implementación en un entorno de prueba: Desplegar el sistema en un entorno controlado que simule las condiciones de uso real, permitiendo obtener feedback directo y validar el comportamiento del chatbot en interacción con usuarios y la infraestructura existente.\n\n\n\n\nSe ha decidido priorizar la implementación en la página de pruebas de la empresa. Esta decisión se fundamenta en la necesidad de validar el sistema en un entorno lo más cercano posible a producción, identificar rápidamente fallos en la integración, la experiencia del usuario, y orientar los ciclos de mejora futuros con base en datos de uso real. La implementación en pruebas servirá como una plataforma funcional sobre la cual se podrá continuar iterando y perfeccionando la solución de manera incremental."
  },
  {
    "objectID": "despliegue.html#plan-de-implementación",
    "href": "despliegue.html#plan-de-implementación",
    "title": "Despliegue",
    "section": "2 Plan de implementación",
    "text": "2 Plan de implementación\nLa fase de implementación implica el despliegue de los componentes desarrollados y su integración en el entorno web de pruebas de CT Online. El objetivo es habilitar el widget de chatbot para un grupo controlado de usuarios.\n\n2.1. Arquitectura de Despliegue y Conexión\nLa fase de implementación en el entorno de pruebas requiere el despliegue de la API del chatbot (desarrollada en Python con FastAPI) y la integración del widget (desarrollado en JavaScript, HTML y CSS) en la página web de pruebas de CT Online.\nUn desafío técnico crucial identificado durante la planificación del despliegue fue la política de seguridad de “contenido mixto” (mixed content) impuesta por los navegadores modernos. Dado que la página de pruebas de la empresa se sirve a través de HTTPS para garantizar una conexión segura, el navegador bloquea las peticiones que el código JavaScript del widget intenta realizar a recursos o servicios que no son seguros, como la API FastAPI que opera con el protocolo HTTP. Realizar llamadas directas desde HTTPS a HTTP resulta en un error de “mixed content”, impidiendo la comunicación.\nTambién se evaluó la posibilidad de servir la API directamente a través de HTTPS. Sin embargo, esta alternativa implicaba mayores retos técnicos y operativos, como la gestión de certificados SSL válidos que autentiquen la comunicación segura entre el servidor y los navegadores. Aunque se intentó utilizar un certificado autofirmado, los navegadores modernos no lo reconocen como confiable, lo que resultaba en el bloqueo automático de las conexiones. Además del reto técnico, esta opción implicaba complicaciones administrativas relacionadas con la obtención, configuración y renovación de certificados válidos, lo que aumentaba la complejidad del despliegue inicial.\nPara superar este obstáculo y permitir la comunicación segura entre el frontend en HTTPS y la API, se ha adoptado la siguiente arquitectura de despliegue utilizando un backend proxy:\n\nLa aplicación principal de la empresa, que opera en un entorno seguro con HTTPS, actuará como intermediaria. Dado que esta aplicación utiliza PHP, el proxy se implementará en este lenguaje.\nEl widget, integrado en la página de pruebas (servida en HTTPS), no realizará llamadas directas a la API FastAPI. En su lugar, el JavaScript del widget será configurado para enviar todas sus peticiones a un nuevo endpoint específico en el backend PHP.\nEl backend PHP recibirá estas peticiones entrantes del frontend (en HTTPS).\nEl código PHP, realizará entonces la solicitud real a la API. La comunicación entre el backend PHP y la API no está sujeta a las restricciones de contenido mixto del navegador, o sea, sin importa si la API se sirve en HTTP o HTTPS, el PHP siempre se puede comunicar con el servicio sin problema.\nEl backend PHP recibirá la respuesta de la API y la reenviará de vuelta al frontend del widget (en HTTPS), en otras palabras, se apunta así mismo.\n\nEste enfoque de proxy en el backend PHP resuelve el problema del contenido mixto al asegurar que la comunicación entre el navegador (frontend) y la infraestructura del backend de la empresa siempre se realice a través de HTTPS. El desafío de integrar una fuente HTTP en un entorno HTTPS queda encapsulado en la comunicación de servidor a servidor.\n\n\n2.2 Desarrollo del widget frontend\nSe desarrolló un widget de chat personalizado e integrable mediante un simple script (sdk.js). Este widget se encarga de inyectar la interfaz de usuario (html) y cargar la lógica de la aplicación (app.js) y los estilos (styles.css) de forma dinámica en cualquier página web.\n\n\n2.3 Plan de monitoreo\nDurante la fase de pruebas, se implementará un plan de monitoreo para evaluar el rendimiento y comportamiento del sistema. Las métricas clave a seguir incluirán:\n\nTiempo de respuesta de la API: Latencia entre el envío de una consulta y la recepción de la primera parte o la respuesta completa.\nTasa de éxito/Error de las peticiones a la API: Proporción de peticiones que resultan en códigos de estado.\nCalidad de las respuestas: Evaluación manual o semi-automatizada de la coherencia, relevancia y precisión de las respuestas del chatbot, especialmente en casos donde no se encuentran recomendaciones.\nFrecuencia de uso del widget: Número de aperturas del chat y cantidad de interacciones por usuario.\nErrores en la consola del navegador: Monitoreo de errores de JavaScript o CSS reportados por los usuarios durante el uso del widget.\n\n\n\n2.4 Plan de mantenimiento\nSe establecerá un plan de mantenimiento periódico para asegurar la estabilidad y el buen funcionamiento del sistema desplegado:\n\nActualización de dependencias: Programar revisiones y actualizaciones de las librerías y paquetes utilizados en la API (Python, Langchain, FastAPI, etc.) y potencialmente en el frontend si se usan librerías externas.\nRevisión de logs: Monitorear activamente los logs del servidor donde corre la API y de los servicios web para identificar y solucionar errores.\nAuditoría de calidad de datos y respuestas: Realizar evaluaciones regulares de la calidad de los datos de origen y verificar la calidad de las respuestas generadas por el modelo con el tiempo.\nRefactorización y optimización: A medida que se identifiquen áreas de mejora o cambien los requisitos, planificar tareas de refactorización de código para mejorar la modularidad, el rendimiento o la mantenibilidad.\n\n\n\n2.5 Experiencia de desarrollo\nEl proyecto ha permitido consolidar la experiencia en el ciclo completo de desarrollo de una aplicación basada en modelos de lenguaje, desde la comprensión y preparación de datos complejos, pasando por el prototipado con herramientas como Langchain, hasta el desarrollo de una API robusta con FastAPI y la implementación de una interfaz de usuario dinámica y reusable (widget frontend desarrollado en JS, HTML y CSS). La resolución de desafíos específicos como el manejo de diferentes estructuras de datos para las vector stores y la integración segura de una API a un entorno web real (HTTPS/contenido mixto, CORS, permisos de red) han sido aprendizajes clave con complicaciones y problemas que se pudieron corregir y solucionar. Se han seguido buenas prácticas de desarrollo, enfocándose en la modularidad para facilitar futuras expansiones (ej: integración de LangGraph) y el mantenimiento del código.\n\n\n2.6 Despliegue del chatbot en el sistema de desarrollo\nEl chatbot fue desplegado exitosamente en el entorno de pruebas de CT Online, habilitado específicamente para fines de desarrollo e integración continua. Este entorno permite validar en condiciones casi reales el comportamiento tanto del frontend (widget) como de la API conversacional.\nEl proceso de despliegue consistió en los siguientes pasos:\n\nMontaje del entorno de la API: La API desarrollada con FastAPI se desplegó en un servidor, o ambiente virtual de linux, utilizando Gunicorn como servidor de aplicaciones y conectándose al backend de la página de CT Online.\nIntegración del widget en la página de pruebas: Se inyectó el script del widget directamente en la página, asegurando que se pudieran cargar dinámicamente los recursos necesarios (JS, HTML y CSS) desde un servidor de archivos estáticos. La integración se validó en distintos navegadores modernos para asegurar la compatibilidad y el correcto funcionamiento.\nGestión de versiones y control de cambios: Se utilizó Git para gestionar versiones del código tanto del sistema del Chatbot, la API y del widget. Esto permitió llevar un registro detallado de los cambios realizados y facilitó el proceso de despliegue incremental, en caso de futuras modificaciones o ajustes.\nVerificación funcional: Tras el despliegue inicial, se realizaron pruebas manuales y automatizadas para verificar el correcto funcionamiento del flujo de conversación, el tiempo de respuesta de la API y el comportamiento del widget en diferentes escenarios (errores, entradas no reconocidas, ausencia de resultados, etc.).\nConsideraciones de seguridad: Aunque se trata de un entorno de pruebas, se aseguraron medidas básicas como la validación de origen en CORS, limitación de rutas expuestas en la API, y uso de HTTPS para todas las comunicaciones entre cliente y servidor.\n\nLa imagen a continuación muestra el chatbot funcionando en su entorno de desarrollo, con el widget incrustado en la página de pruebas de CT Online:\n\n\n\nChatbot desplegado\n\n\nEste hito marca un avance significativo hacia la validación en entorno real del sistema conversacional, permitiendo recopilar feedback de usuarios internos antes de considerar un despliegue completo en producción."
  },
  {
    "objectID": "preparacion.html",
    "href": "preparacion.html",
    "title": "Preparación de los datos",
    "section": "",
    "text": "Una vez establecidas las conexiones con los servicios de datos, transformamos y consolidamos la información en una base de datos completa y estructurada. Esta base servirá como fuente para el chatbot, permitiéndole responder consultas de manera eficiente.\nLos datos principales provienen de tres conjuntos:\n\nProductos disponibles en la plataforma.\n\nProductos en promoción.\n\nFichas técnicas de los productos, proporcionando información detallada.\n\nTodos los productos se relacionan a través de las claves idProducto y Clave del producto.\n\n\nPara estructurar la información de las fichas técnicas, extraemos los datos relevantes del apartado @attributes, transformando la estructura de la siguiente manera:\nFormato original:\n{\n    \"ACCCDM1010\": {\n        \"respuesta\": {\n            \"tag\": \"CT-Respuesta\",\n            \"status\": \"success\",\n            \"mensaje\": \"Consulta realizada\",\n            \"data\": {\n                \"Product\": {\n                    \"@attributes\": {}\n                }\n            }\n        }\n    }\n}\nFormato optimizado:\n{'ACCCDM1010': {\n    'fichaTecnica': {\n\n},\n    'resumen': {\n    \n  }},\n   }\n\n\n\nEn cuanto a la limpieza de datos para los productos y las promociones, identificamos tres columnas que requieren un tratamiento similar. Aplicamos los siguientes pasos:\n\nReemplazo de valores nulos por un espacio ''.\n\nSustitución de los 0 en la descripción por un espacio ''.\n\nConversión de las tres columnas a tipo string.\n\nConcatenación de estas columnas para generar una columna más completa.\n\nAdemás, a la columna detalles_precio en los productos, le aplicamos una transformación de formato, convirtiéndola no solo en string, sino también en formato JSON.\nUna vez realizadas estas transformaciones, incorporamos la ficha técnica tanto a los productos como a las promociones.\nEn el caso de los productos, la información final queda estructurada de la siguiente manera:\n{\n    \"0\": {\n        \"idProductos\": \"\",\n        \"nombre\": \"\",\n        \"clave\": \"ACCCDM1010\",\n        \"categoria\": \"\",\n        \"marca\": \"\",\n        \"tipo\": \"\",\n        \"modelo\": \"\",\n        \"detalles\": \"\",\n        \"detalles_precio\": [\n            {\n                \"listaPrecio\": 1,\n                \"precio\": \"\"\n            },\n            {\n                \"listaPrecio\": 2,\n                \"precio\": \"\"\n            }\n        ],\n        \"fichaTecnica\": { \"\"\n        },\n        \"resumen\": { \"\"\n        }\n    },}\nReiteramos que el proceso de limpieza aplicado a las promociones fue similar al de los productos. A continuación, se presenta el resultado final de la estructura deseada:\n{\n    \"0\": {\n        \"idProducto\": \"\",\n        \"nombre\": \"\",\n        \"producto\": \"CARBRT010\",\n        \"categoria\": \"\",\n        \"marca\": \"\",\n        \"tipo\": \"\",\n        \"modelo\": \"\",\n        \"detalles\": \"\",\n        \"importe\": \"\",\n        \"porcentaje\": \"%\",\n        \"EnCompraDE\": \"\",\n        \"Unidades\": \"\",\n        \"limitadoA\": \"\",\n        \"fecha_inicio\": \"\",\n        \"fecha_fin\": \"\",\n        \"precios\": \"[]\",\n        \"fichaTecnica\": { \"\"\n        },\n        \"resumen\": {\n            \"ShortSummary\": \"\",\n            \"LongSummary\": \"\"\n        }\n    },}"
  },
  {
    "objectID": "preparacion.html#preparación-de-los-datos",
    "href": "preparacion.html#preparación-de-los-datos",
    "title": "Preparación de los datos",
    "section": "",
    "text": "Una vez establecidas las conexiones con los servicios de datos, transformamos y consolidamos la información en una base de datos completa y estructurada. Esta base servirá como fuente para el chatbot, permitiéndole responder consultas de manera eficiente.\nLos datos principales provienen de tres conjuntos:\n\nProductos disponibles en la plataforma.\n\nProductos en promoción.\n\nFichas técnicas de los productos, proporcionando información detallada.\n\nTodos los productos se relacionan a través de las claves idProducto y Clave del producto.\n\n\nPara estructurar la información de las fichas técnicas, extraemos los datos relevantes del apartado @attributes, transformando la estructura de la siguiente manera:\nFormato original:\n{\n    \"ACCCDM1010\": {\n        \"respuesta\": {\n            \"tag\": \"CT-Respuesta\",\n            \"status\": \"success\",\n            \"mensaje\": \"Consulta realizada\",\n            \"data\": {\n                \"Product\": {\n                    \"@attributes\": {}\n                }\n            }\n        }\n    }\n}\nFormato optimizado:\n{'ACCCDM1010': {\n    'fichaTecnica': {\n\n},\n    'resumen': {\n    \n  }},\n   }\n\n\n\nEn cuanto a la limpieza de datos para los productos y las promociones, identificamos tres columnas que requieren un tratamiento similar. Aplicamos los siguientes pasos:\n\nReemplazo de valores nulos por un espacio ''.\n\nSustitución de los 0 en la descripción por un espacio ''.\n\nConversión de las tres columnas a tipo string.\n\nConcatenación de estas columnas para generar una columna más completa.\n\nAdemás, a la columna detalles_precio en los productos, le aplicamos una transformación de formato, convirtiéndola no solo en string, sino también en formato JSON.\nUna vez realizadas estas transformaciones, incorporamos la ficha técnica tanto a los productos como a las promociones.\nEn el caso de los productos, la información final queda estructurada de la siguiente manera:\n{\n    \"0\": {\n        \"idProductos\": \"\",\n        \"nombre\": \"\",\n        \"clave\": \"ACCCDM1010\",\n        \"categoria\": \"\",\n        \"marca\": \"\",\n        \"tipo\": \"\",\n        \"modelo\": \"\",\n        \"detalles\": \"\",\n        \"detalles_precio\": [\n            {\n                \"listaPrecio\": 1,\n                \"precio\": \"\"\n            },\n            {\n                \"listaPrecio\": 2,\n                \"precio\": \"\"\n            }\n        ],\n        \"fichaTecnica\": { \"\"\n        },\n        \"resumen\": { \"\"\n        }\n    },}\nReiteramos que el proceso de limpieza aplicado a las promociones fue similar al de los productos. A continuación, se presenta el resultado final de la estructura deseada:\n{\n    \"0\": {\n        \"idProducto\": \"\",\n        \"nombre\": \"\",\n        \"producto\": \"CARBRT010\",\n        \"categoria\": \"\",\n        \"marca\": \"\",\n        \"tipo\": \"\",\n        \"modelo\": \"\",\n        \"detalles\": \"\",\n        \"importe\": \"\",\n        \"porcentaje\": \"%\",\n        \"EnCompraDE\": \"\",\n        \"Unidades\": \"\",\n        \"limitadoA\": \"\",\n        \"fecha_inicio\": \"\",\n        \"fecha_fin\": \"\",\n        \"precios\": \"[]\",\n        \"fichaTecnica\": { \"\"\n        },\n        \"resumen\": {\n            \"ShortSummary\": \"\",\n            \"LongSummary\": \"\"\n        }\n    },}"
  },
  {
    "objectID": "preparacion.html#consolidación-base-de-datos-vectorial",
    "href": "preparacion.html#consolidación-base-de-datos-vectorial",
    "title": "Preparación de los datos",
    "section": "2. Consolidación base de datos vectorial",
    "text": "2. Consolidación base de datos vectorial\nAhora que tenemos los datos preparados y con la estructura deseada. Procederemos a crear la base de datos vectorial con esta información. Tomamos los datos y los convertimos en un tipo Document para poder pasarlo a FAISS (base vectorial) junto con los embeddings y guardarlo de forma local.\ndocs = [\n    Document(\n        page_content=construir_contenido(producto, campos),\n        metadata={\"idProducto\": producto[\"idProductos\"], \"Nombre\": producto[\"nombre\"]}\n    )\n    for producto in datos_dict.values()\n]\n\n# Usar embeddings de OpenAI \nembeddings = OpenAIEmbeddings(api_key=api_key)\n\n# Crear base de datos FAISS con los documentos\nvectorstore = FAISS.from_documents(docs, embeddings)\n\n# Guardar la base de datos para futuras consultas\nvectorstore.save_local()"
  },
  {
    "objectID": "comprension.html",
    "href": "comprension.html",
    "title": "Comprensión del negocio",
    "section": "",
    "text": "CT Internacional es una empresa mexicana encargada en distribuir soluciones de Tecnologías de la Información (TI), preferida para hacer negocios de los distribuidores e integradores del mundo de la tecnología. Fundada en 1992 en la ciudad de Hermosillo, esta empresa surgió como una respuesta a la oportunidad de llevar soluciones de TI, principalmente en el noroeste del país (Saúl Rojo). La cual poco a poco se fue expandiendo hasta lograr el alcance que tiene hoy en día, convirtiéndose en una empresa mayorista de alto impacto en el canal de distribución. Actualmente es una de las mejores empresas mexicanas y tiene presencia con 52 sucursales en todos los estados del país. Además cuenta con un canal de distribución integrado por más de 31 mil clientes y aliados de negocio a quiénes proporciona un extenso catálogo de productos y servicios de más de 202 marcas agrupadas en 12 unidades de negocio.\nTeniendo más de 25 años en el mercado, el crecimiento constante del negocio y del mundo de la tecnología, además de la gran cantidad de productos que ofrecen para su distribución; la empresa tiene la oportunidad de aprovechar los avances tecnológicos que se han ido generado hoy en día a su favor. Esto con la intención de ofrecer un mejor servicio a sus clientes y darles un mejor acercamiento de sus productos para que sean capaces de ver un catálogo especial o personalizado en sus necesidades específicas.\nObjetivo del proyecto:\nOptimizar el proceso de recomendación de productos dentro de la empresa mediante el uso de inteligencia artificial, mejorando la precisión y eficiencia en la búsqueda de opciones alineadas con las necesidades de los clientes.\nImpacto:\nLa empresa se estaría adaptando a la nueva era tecnológica, consolidando su liderazgo en el mercado al ofrecer productos que antes podían pasar desapercibidos para el cliente. Con este sistema, los consumidores pueden tomar decisiones ajustadas a sus necesidades, generando valor tanto para ellos como para la empresa."
  },
  {
    "objectID": "comprension.html#objetivos-de-la-línea-de-investigación",
    "href": "comprension.html#objetivos-de-la-línea-de-investigación",
    "title": "Comprensión del negocio",
    "section": "0.1 Objetivos de la línea de investigación",
    "text": "0.1 Objetivos de la línea de investigación\nEsta línea de investigación se enfoca en aprovechar la información disponible sobre los productos de la empresa, incluyendo características técnicas, precios y disponibilidad, con el objetivo de optimizar su accesibilidad y uso en procesos comerciales.\nEl primer paso es extraer, analizar y evaluar la calidad de los datos almacenados en la base de datos de la empresa para determinar si son suficientes para el desarrollo del sistema o si es necesario complementarlos con información adicional.\nUna vez validada la información, se procederá a su transformación mediante modelos de embeddings, convirtiéndola en representaciones vectoriales para su almacenamiento en una base de datos vectorial.\nEl objetivo final es desarrollar un sistema que permita a los usuarios consultar productos con base en especificaciones detalladas mediante un chatbot, el cual recuperará información relevante desde la base de datos vectorial, mejorando la precisión y relevancia de las recomendaciones.\nActualmente:\nLos productos se ofrecen a través de la plataforma, donde los clientes pueden realizar búsquedas según sus necesidades. Sin embargo, el sistema de búsqueda presenta limitaciones: si los clientes no utilizan ciertas palabras clave que están relacionadas al producto, encontrar lo que buscan puede volverse complicado. Además, la empresa cuenta con un sistema de asistencia por llamada o correo, donde un operador ayuda a los clientes a resolver dudas o encontrar productos específicos.\nObjetivo principal:\nDesarrollar un chatbot de recomendación de productos basado en un sistema de generación de recuperación aumentada (RAG) conectada a una base de datos vectorial para ofrecer respuestas precisas y relevantes a los usuarios, optimizando el proceso de búsqueda de productos que la empresa ofrece.\nObjetivos específicos:\n\nAnalizar y organizar la información disponible sobre un conjunto de los productos para evaluar su calidad y definir los atributos clave que se utilizarán en el sistema de recomendación. Además, identificar si es necesario crear nuevas características o ajustar las existentes para mejorar la precisión de las recomendaciones.\nDesarrollar un modelo de representación vectorial que convierta la información de los productos en representaciones vectoriales para su almacenamiento y recuperación eficiente.\nImplementar un sistema RAG que integre un modelo de lenguaje grande (LLM) con la base de datos vectorial para generar recomendaciones de productos precisas y relevantes.\nValidar el desempeño del sistema mediante pruebas de precisión, relevancia de las recomendaciones y eficiencia en la recuperación de información.\n\nCriterios de éxito:\n\nPrecisión en la recomendación de productos:\n\nAl menos el 90% de las 100 recomendaciones evaluadas deben coincidir con las necesidades descritas por el usuario, dando una respuesta directa, precisa y concisa en la información que proporcionada. La calidad de estas recomendaciones será validada por expertos con conocimiento en los productos.\n\nReproducibilidad y consistencia:\n\nConsultas similares deben producir respuestas coherentes en al menos el 90% de los 100 casos, evitando variaciones innecesaria, además de sugerencia de productos no disponibles o fuera de stock, ni productos que no existan. Este criterio también será evaluado por los mismos expertos quiénes determinarán la calidad de la respuesta.\n\nEscalabilidad:\n\nLa estructura del sistema mantiene su rendimiento al aumentar la cantidad de productos de la base de datos.\nLa calidad de las respuestas y el rendimiento del chatbot se mantiene constante al aumentar la cantidad de usuarios."
  },
  {
    "objectID": "comprension.html#evaluación-de-la-situación-actual",
    "href": "comprension.html#evaluación-de-la-situación-actual",
    "title": "Comprensión del negocio",
    "section": "0.2 Evaluación de la situación actual",
    "text": "0.2 Evaluación de la situación actual\nLos recursos que se tienen actualmente para este proyecto son:\n\nDatos: Registro de todos los productos de la empresa disponibles para distribución. La información incluye nombre, marca, tipo, modelo, descripción, palabras clave, stock disponible, ficha técnica con especificaciones, características principales, fecha del registro y precio. Toda esta información se tiene en una base de datos SQL, la cual se actualiza periódicamente.\nHerramientas: Python, servicios de OpenAI y bases de datos SQL.\nEquipo humano: Especialistas en el sistema de distribución de la empresa, expertos en la estructura y manejo de la base de datos para facilitar la extracción de datos, y científicos de datos encargados del desarrollo y evaluación del sistema junto con los especialistas.\n\n\n0.2.1 Requisitos, supuestos y restricciones\nRequisitos:\n\nAcceso a los registros de los productos de la empresa y equipo de compúto con características específicas para el desarrollo del proyecto.\nComunicación constante con los expertos de la empresa para constante evaluación y retroalimentación.\nCredenciales para el uso y acceso de herramientas de la empresa.\n\nSupuestos:\n\nLos permisos y el acceso a la base de datos se matendrá a la disposición del equipo siempre que se necesite sin problemas.\nAPI KEY con créditos suficientes disponibles, para evitar problemas con las llamadas de los modelos de OpenAI.\n\nRestricciones:\n\nLimitaciones en el uso del enlace de la conexión de la base de datos ya que se puede saturar.\nConexiones del sistema con la red de la empresa presentan problemas de sseguridad y permisos que se deben verificar y aprobar por las personas encargadas de infraestructura."
  },
  {
    "objectID": "comprension.html#terminologia",
    "href": "comprension.html#terminologia",
    "title": "Comprensión del negocio",
    "section": "0.3 Terminología",
    "text": "0.3 Terminología\nAlgunas de las terminologías clave para este proyecto son:\n\nPython: Lenguaje de programación de alto nivel, ampliamente utilizado en el desarrollo de software, análisis de datos, inteligencia artificial y automatización.\n\nFastAPI: Framework de desarrollo web en Python que permite construir APIs de forma rápida, sencilla y eficiente.\n\nLangChain: Herramienta para construir aplicaciones que combinan modelos de lenguaje con fuentes de datos externas y lógica personalizada.\n\nInteligencia artificial (IA): Campo de la informática que desarrolla sistemas capaces de realizar tareas que requieren inteligencia humana, como el aprendizaje, la toma de decisiones y el procesamiento del lenguaje natural.\n\nModelos de lenguaje grande (LLM): Modelos de inteligencia artificial entrenados con grandes volúmenes de texto para comprender y generar lenguaje natural.\n\nSistema de recuperación mejorada (RAG): Técnica que combina modelos de lenguaje con bases de datos externas para recuperar información relevante y generar respuestas más precisas.\n\nRepresentación vectorial: Proceso de convertir datos textuales en representaciones numéricas (vectores) para facilitar su análisis y búsqueda.\n\nModelo de embeddings: Algoritmo que transforma palabras o frases en vectores de manera que su similitud semántica pueda medirse matemáticamente.\n\nBase de datos vectorial: Sistema de almacenamiento optimizado para buscar y recuperar información midiendo la similitud entre vectores.\n\nBase de datos SQL (Structured Query Language): Sistema de almacenamiento relacional que organiza los datos en tablas con filas y columnas, usando SQL para consultarlos.\n\nAPI (Interfaz de Programación de Aplicaciones): Conjunto de reglas que permite que diferentes sistemas de software se comuniquen entre sí.\n\nAPI KEY: Clave de autenticación utilizada para acceder a servicios protegidos por una API.\n\nEndpoint (API): Dirección específica dentro de una API donde se accede a una funcionalidad concreta.\n\nPayload (HTTP): Contenido de los datos enviados en una solicitud HTTP, como un formulario o un JSON con información.\n\nChatbot: Programa que interactúa con los usuarios mediante lenguaje natural para responder preguntas o realizar tareas automatizadas.\n\nFrontend: Parte visual o interfaz con la que interactúa el usuario en una aplicación web.\n\nBackend: Parte lógica o del servidor donde se procesa la información y se ejecutan las funciones principales de una aplicación.\n\nHTTP (Hypertext Transfer Protocol): Protocolo para la transferencia de datos en la web.\n\nHTTPS (HTTP Secure): Versión segura del protocolo HTTP que cifra los datos para proteger la comunicación.\n\nContenido mixto (Mixed Content): Problema de seguridad que ocurre cuando una página HTTPS carga recursos desde una fuente HTTP, lo cual puede ser bloqueado por los navegadores.\n\nCertificado SSL/TLS: Archivo digital que autentica la identidad de un sitio web y cifra la información entre el servidor y el navegador.\n\nAutoridad Certificadora (CA): Entidad confiable que emite certificados digitales para garantizar la seguridad en la web.\n\nProxy: Servidor que actúa como intermediario entre un cliente y otro servidor, utilizado para redirigir solicitudes.\n\nPuerto (de red): Punto lógico de conexión en un servidor que permite recibir solicitudes de red.\n\nWidget: Componente visual incrustado en una página web, como un chatbot o formulario."
  },
  {
    "objectID": "comprension.html#beneficios",
    "href": "comprension.html#beneficios",
    "title": "Comprensión del negocio",
    "section": "0.4 Beneficios",
    "text": "0.4 Beneficios\n\nInnovación en la oferta de productos: Introducir un nuevo enfoque en la recomendación de productos, brindando una experiencia más personalizada y efectiva tanto para la empresa como para los clientes.\nOptimización de la estrategia del mercado: La implementación del sistema abre oportunidades para nuevas estrategias de negocio, mejorando la eficiencia y el alcance en la comercialización de productos."
  },
  {
    "objectID": "comprension.html#costos",
    "href": "comprension.html#costos",
    "title": "Comprensión del negocio",
    "section": "0.5 Costos",
    "text": "0.5 Costos\n\nTiempo: El proyecto tiene un plazo estimado de 3 meses para desarrollar una versión funcional y tangible que sirva como punto de partida para futuras mejoras e implementación en el flujo de trabajo.\nFinancieros: Se consideran costos asociados a suscripciones de herramientas de pago necesarias para el desarrollo e implementación del sistema."
  },
  {
    "objectID": "home.html",
    "href": "home.html",
    "title": "Chatbot para sugerencias de productos: un enfoque personalizado",
    "section": "",
    "text": "Este proyecto se enfoca en el desarrollo de un chatbot para la recomendación de productos, basado en un sistema de recuperación de información desde una base de datos vectorial. A través de este chatbot, se busca optimizar la experiencia del cliente, sugiriendo productos relevantes según las especificaciones y presupuesto proporcionados.\nEl proyecto se divide en seis fases:\n\nComprensión del Negocio: Definición de los objetivos y el contexto del proyecto, enfocados en la mejora de la experiencia del cliente y la eficiencia del proceso de recomendación de productos.\nComprensión de los Datos: Recolección y análisis preliminar de los datos disponibles, tales como características de los productos y preferencias de los usuarios.\nPreparación de los Datos: Limpieza, transformación y estructuración de los datos para que puedan ser utilizados en el sistema de recomendación y la base de datos vectorial.\nDesarrollo del Sistema de Recomendación: Implementación del chatbot que utilizará un modelo de lenguaje grande (LLM) para interpretar las consultas y hacer recomendaciones basadas en la base de datos vectorial.\nEvaluación: Validación de la precisión y relevancia de las recomendaciones ofrecidas por el chatbot, utilizando métricas de evaluación del sistema.\nImplementación: Integración del chatbot en la plataforma de la empresa, presentación de los resultados y recomendaciones para mejorar el sistema de recomendación y la interacción con los clientes.\n\nA través de estas fases, se busca proporcionar una solución innovadora que mejore la interacción con los clientes, optimizando la selección de productos y mejorando la eficiencia del proceso de recomendación."
  },
  {
    "objectID": "home.html#introducción",
    "href": "home.html#introducción",
    "title": "Chatbot para sugerencias de productos: un enfoque personalizado",
    "section": "",
    "text": "Este proyecto se enfoca en el desarrollo de un chatbot para la recomendación de productos, basado en un sistema de recuperación de información desde una base de datos vectorial. A través de este chatbot, se busca optimizar la experiencia del cliente, sugiriendo productos relevantes según las especificaciones y presupuesto proporcionados.\nEl proyecto se divide en seis fases:\n\nComprensión del Negocio: Definición de los objetivos y el contexto del proyecto, enfocados en la mejora de la experiencia del cliente y la eficiencia del proceso de recomendación de productos.\nComprensión de los Datos: Recolección y análisis preliminar de los datos disponibles, tales como características de los productos y preferencias de los usuarios.\nPreparación de los Datos: Limpieza, transformación y estructuración de los datos para que puedan ser utilizados en el sistema de recomendación y la base de datos vectorial.\nDesarrollo del Sistema de Recomendación: Implementación del chatbot que utilizará un modelo de lenguaje grande (LLM) para interpretar las consultas y hacer recomendaciones basadas en la base de datos vectorial.\nEvaluación: Validación de la precisión y relevancia de las recomendaciones ofrecidas por el chatbot, utilizando métricas de evaluación del sistema.\nImplementación: Integración del chatbot en la plataforma de la empresa, presentación de los resultados y recomendaciones para mejorar el sistema de recomendación y la interacción con los clientes.\n\nA través de estas fases, se busca proporcionar una solución innovadora que mejore la interacción con los clientes, optimizando la selección de productos y mejorando la eficiencia del proceso de recomendación."
  },
  {
    "objectID": "comprension_datos.html",
    "href": "comprension_datos.html",
    "title": "Comprensión de los datos",
    "section": "",
    "text": "La fuente principal de información es la base de datos SQL local de la empresa, específicamente las tablas que contienen los datos relevantes de los productos y sus características más importantes. Estos datos se extraen mediante una conexión de Python con SQL y se almacenan en un archivo .json para su posterior procesamiento.\nAdemás, complementamos esta información con datos obtenidos de un servicio local, el cual proporciona las fichas técnicas de los productos en formato XML.\n\n\n\nEl conjunto de datos contiene un total de 6,528 productos únicos. Aunque para la exploración hemos estado usando un subconjunto más pequeño de los datos. La información extraída de SQL incluye las siguientes columnas:\n\n\nIndex(['idProductos', 'nombre', 'clave', 'categoria', 'marca', 'tipo',\n       'modelo', 'descripcion', 'descripcion_corta', 'palabrasClave',\n       'detalles_precio'],\n      dtype='object')\n\n\nEstas columnas fueron seleccionadas en la consulta enviada al servidor SQL, priorizando aquellas más relevantes para el proyecto.\nEn cuanto a la información de las fichas técnicas, una vez llamado el servicio con la lista de claves de los productos, los datos obtenidos tienen el siguiente formato:\n{\n    \"ACCCDM1010\": {\n        \"respuesta\": {\n            \"tag\": \"CT-Respuesta\",\n            \"status\": \"success\",\n            \"mensaje\": \"Consulta realizada\",\n            \"data\": {\n                \"Product\": {\n                    \"@attributes\": {}}}}}}\nEn este ejemplo, se muestra la ficha técnica de un solo producto. De este archivo, los atributos de interés que utilizaremos son: Clave, Feature, Presentation_Value y SummaryDescription, los cuales se encuentran en el atributo de Product.\n\n\n\nPara completar el sistema de ofertas de productos, añadiremos aquellos productos que estén en promoción. De este modo, los clientes podrán encontrar y aprovechar fácilmente las ofertas que les interesen."
  },
  {
    "objectID": "comprension_datos.html#recolección-de-los-datos",
    "href": "comprension_datos.html#recolección-de-los-datos",
    "title": "Comprensión de los datos",
    "section": "",
    "text": "La fuente principal de información es la base de datos SQL local de la empresa, específicamente las tablas que contienen los datos relevantes de los productos y sus características más importantes. Estos datos se extraen mediante una conexión de Python con SQL y se almacenan en un archivo .json para su posterior procesamiento.\nAdemás, complementamos esta información con datos obtenidos de un servicio local, el cual proporciona las fichas técnicas de los productos en formato XML.\n\n\n\nEl conjunto de datos contiene un total de 6,528 productos únicos. Aunque para la exploración hemos estado usando un subconjunto más pequeño de los datos. La información extraída de SQL incluye las siguientes columnas:\n\n\nIndex(['idProductos', 'nombre', 'clave', 'categoria', 'marca', 'tipo',\n       'modelo', 'descripcion', 'descripcion_corta', 'palabrasClave',\n       'detalles_precio'],\n      dtype='object')\n\n\nEstas columnas fueron seleccionadas en la consulta enviada al servidor SQL, priorizando aquellas más relevantes para el proyecto.\nEn cuanto a la información de las fichas técnicas, una vez llamado el servicio con la lista de claves de los productos, los datos obtenidos tienen el siguiente formato:\n{\n    \"ACCCDM1010\": {\n        \"respuesta\": {\n            \"tag\": \"CT-Respuesta\",\n            \"status\": \"success\",\n            \"mensaje\": \"Consulta realizada\",\n            \"data\": {\n                \"Product\": {\n                    \"@attributes\": {}}}}}}\nEn este ejemplo, se muestra la ficha técnica de un solo producto. De este archivo, los atributos de interés que utilizaremos son: Clave, Feature, Presentation_Value y SummaryDescription, los cuales se encuentran en el atributo de Product.\n\n\n\nPara completar el sistema de ofertas de productos, añadiremos aquellos productos que estén en promoción. De este modo, los clientes podrán encontrar y aprovechar fácilmente las ofertas que les interesen."
  },
  {
    "objectID": "comprension_datos.html#descripción-de-los-datos",
    "href": "comprension_datos.html#descripción-de-los-datos",
    "title": "Comprensión de los datos",
    "section": "0.2 Descripción de los datos",
    "text": "0.2 Descripción de los datos\nComo se mencionó anteriormente, el conjunto de datos consta de 6,528 productos únicos. Al combinar la información extraída de SQL con las fichas técnicas en formato XML, obtenemos las siguientes variables:\n\n\n\n\n\n\n\n\nVariable\nDescripción\nTipo de dato\n\n\n\n\nidProductos\nIdentificador único asignado a cada producto en la base de datos.\nNumérico\n\n\nNombre\nNombre del producto tal como aparece en la página web o catálogo.\nTexto\n\n\nClave\nCódigo único que distingue al producto de otros en el sistema.\nTexto\n\n\nCategoría\nClasificación o tipo de producto al que pertenece.\nTexto\n\n\nMarca\nNombre de la empresa que fabrica o distribuye el producto.\nTexto\n\n\nTipo\nEspecificación del tipo de producto (por ejemplo, cable, bateria, etc.).\nTexto\n\n\nModelo\nIdentificación del modelo específico del producto.\nTexto\n\n\nDetalles\nDescripción completa y detallada del producto.\nTexto\n\n\nDetalles precio\nRango de precios en el que el producto puede encontrarse.\nTexto\n\n\nFicha técnica\nInformación técnica detallada sobre el producto.\nTexto\n\n\nResumen\nResumen general del producto y sus características principales.\nTexto"
  },
  {
    "objectID": "comprension_datos.html#exploración-de-los-datos",
    "href": "comprension_datos.html#exploración-de-los-datos",
    "title": "Comprensión de los datos",
    "section": "0.3 Exploración de los datos",
    "text": "0.3 Exploración de los datos\n\n0.3.1 Variedad de productos\nPara comenzar, examinaremos la distribución de categorías dentro del catálogo, identificando cuáles son las más representativas entre un total de 247 categorías distintas.\nEl siguiente análisis nos permitirá visualizar las 10 categorías más frecuentes, lo que nos dará una mejor comprensión de la composición del inventario.\n\n\n\n\n\n\n\n\n\nVemos que los tóners destacan como la categoría predominante, seguidos por las aplicaciones de seguridad, aunque en este último caso, la diferencia con el resto de las categorías es menos marcada en comparación con la primera.\nDel mismo modo, exploraremos la distribución de marcas en los productos y visualizaremos las 10 más comunes dentro de un total de 195 marcas registradas.\n\n\n\n\n\n\n\n\n\nEn este análisis, observamos que la marca BROBOTIX sobresale como la más frecuente en el catálogo. Le sigue MANHATTAN, con una diferencia más reducida respecto a las siguientes marcas, en un patrón similar al que se observó en las categorías.\n\n\n0.3.2 Distribución de las palabras asociadas a los productos\nEn esta sección, analizaremos la cantidad de palabras utilizadas en diferentes descripciones de los productos. Esto nos permitirá entender cómo se estructuran los nombres, descripciones y palabras clave dentro del catálogo.\nPara ello, compararemos la distribución de palabras en los siguientes atributos:\n\nNombre del producto\nDescripción completa\nDescripción corta\nPalabras clave asociadas Este análisis nos ayudará a identificar patrones en la longitud de las descripciones y su posible impacto en la categorización y búsqueda de los productos.\n\n\n\n\n\n\n\n\n\n\nAl analizar las distribuciones, observamos que muchas de las instancias de la descripción corta comienzan con 0, pero luego la distribución se aproxima a una distribución quasi-normal, con un promedio de 5 palabras por instancia. En el caso de las descripciones, aunque no todas las instancias comienzan con 0, la distribución de palabras muestra un promedio de 1 palabra. Finalmente, las palabras en los nombres siguen una distribución aparentemente normal, con un promedio de 8 palabras por instancia."
  },
  {
    "objectID": "comprension_datos.html#verificación-de-la-calidad-de-los-datos",
    "href": "comprension_datos.html#verificación-de-la-calidad-de-los-datos",
    "title": "Comprensión de los datos",
    "section": "0.4 Verificación de la calidad de los datos",
    "text": "0.4 Verificación de la calidad de los datos\n\n0.4.1 Datos faltantes\nObservando el comportamiento de las distribuciones de la gráfica pasada, observamos que debe haber presencia de varios datos nulos, además de una distribución algo rara para la variable de descripción ya que el promedio indica que es 1, algo que no se esperaría en una variable de este estilo.\nSi observamos la información de los datos:\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 6526 entries, 0 to 6525\nData columns (total 11 columns):\n #   Column             Non-Null Count  Dtype \n---  ------             --------------  ----- \n 0   idProductos        6526 non-null   int64 \n 1   nombre             6526 non-null   object\n 2   clave              6526 non-null   object\n 3   categoria          6526 non-null   object\n 4   marca              6526 non-null   object\n 5   tipo               6526 non-null   object\n 6   modelo             6526 non-null   object\n 7   descripcion        6526 non-null   object\n 8   descripcion_corta  763 non-null    object\n 9   palabrasClave      6268 non-null   object\n 10  detalles_precio    6526 non-null   object\ndtypes: int64(1), object(10)\nmemory usage: 561.0+ KB\n\n\nAquí vemos que la razón por la cual la distribución de descripción corta empezaba en 0, era porque alrededor del 89% son datos nulos. Sin embargo vemos que la descripción no tiene datos nulos, pero aún así sigue siendo curioso que la cantidad de palabras en promedio sea 1. Para esto analizaremos esta columna, observando sus valores.\n\n\ndescripcion\n0                                                                                                                   4983\n                                                                                                                    1460\nTipo: Limpiador& Función: Para computadoras& Características: Limpieza profunda y protección antiestática              1\nColor: Negro& Compatible: L200                                                                                         1\nTipo: Vertical sencillo&#38; Compatible: Para rack de 42U&#38; Ducto: 4x4 pulgadas&#38; Color: Negro texturizado       1\nName: count, dtype: int64\n\n\nSi observamos en los datos, la gran mayoría de los datos tienen escrito el valor 0 (en tipo string). Y el segundo valor más frecuente son un espacio en blanco."
  },
  {
    "objectID": "modelado.html",
    "href": "modelado.html",
    "title": "Modelado y Evaluación",
    "section": "",
    "text": "El objetivo de esta fase es desarrollar la arquitectura del sistema de recuperación aumentada con generación (RAG). Para ello, se utiliza como fuente de conocimiento la base de datos vectorizada construida en la etapa anterior.\n\n\nDado que el enfoque del proyecto se basa en herramientas de OpenAI, los modelos considerados para esta fase son los siguientes:\n\nGPT-4o-mini:\nUna versión ligera de GPT-4o, diseñada para ofrecer un buen balance entre costo, velocidad de respuesta y calidad en tareas de lenguaje natural. Es ideal para pruebas rápidas o implementaciones donde se requiere eficiencia.\nGPT-4o:\nModelo multimodal de última generación de OpenAI, capaz de procesar texto, imágenes y audio. En este proyecto se utiliza solo su capacidad textual, destacando por su mayor comprensión semántica y coherencia en las respuestas.\nModelos open-source integrados mediante Ollama:\nOllama permite correr modelos de lenguaje open-source de manera local o privada. En este proyecto se contemplan modelos como LLaMA o Mistral, que ofrecen alternativas de código abierto con buen rendimiento en tareas conversacionales.\n\n\n\n\nLa implementación del sistema se basa en una estructura modular orientada a clases. Esto permite una mayor reutilización de código, facilita su mantenimiento y mejora la legibilidad, aspectos clave para futuras modificaciones o revisiones.\nAdemás, esta estructura permite importar únicamente la clase necesaria para ejecutar todo el sistema, lo cual es ideal para su integración a través de una API. De esta forma, se evita depender de notebooks o archivos extensos y poco escalables.\nEl sistema se construyó utilizando principalmente la librería LangChain, la cual ofrece una base robusta para conectar modelos de lenguaje con herramientas externas y flujos personalizados.\n\n\n\nA diferencia de los modelos clásicos de machine learning (ML), la evaluación de sistemas basados en modelos de lenguaje grande (LLMs) requiere enfoques distintos, centrados en la calidad de las respuestas generadas.\nEn este proyecto, la evaluación se realiza mediante un análisis cualitativo de las respuestas del chatbot, tomando en cuenta los siguientes criterios:\n\nLa información sobre productos, descripciones y características debe estar alineada con los datos disponibles en la base vectorial.\nLas respuestas deben ser claras, concisas y coherentes, evitando alucinaciones o información incorrecta.\nLos precios deben coincidir con los establecidos en la base de datos, y en el caso de promociones, estas deben estar correctamente aplicadas, evitando errores que impliquen pérdidas económicas.\n\nEstos criterios serán evaluados por los expertos y personas con conocimiento en la empresa."
  },
  {
    "objectID": "modelado.html#modelado",
    "href": "modelado.html#modelado",
    "title": "Modelado y Evaluación",
    "section": "",
    "text": "El objetivo de esta fase es desarrollar la arquitectura del sistema de recuperación aumentada con generación (RAG). Para ello, se utiliza como fuente de conocimiento la base de datos vectorizada construida en la etapa anterior.\n\n\nDado que el enfoque del proyecto se basa en herramientas de OpenAI, los modelos considerados para esta fase son los siguientes:\n\nGPT-4o-mini:\nUna versión ligera de GPT-4o, diseñada para ofrecer un buen balance entre costo, velocidad de respuesta y calidad en tareas de lenguaje natural. Es ideal para pruebas rápidas o implementaciones donde se requiere eficiencia.\nGPT-4o:\nModelo multimodal de última generación de OpenAI, capaz de procesar texto, imágenes y audio. En este proyecto se utiliza solo su capacidad textual, destacando por su mayor comprensión semántica y coherencia en las respuestas.\nModelos open-source integrados mediante Ollama:\nOllama permite correr modelos de lenguaje open-source de manera local o privada. En este proyecto se contemplan modelos como LLaMA o Mistral, que ofrecen alternativas de código abierto con buen rendimiento en tareas conversacionales.\n\n\n\n\nLa implementación del sistema se basa en una estructura modular orientada a clases. Esto permite una mayor reutilización de código, facilita su mantenimiento y mejora la legibilidad, aspectos clave para futuras modificaciones o revisiones.\nAdemás, esta estructura permite importar únicamente la clase necesaria para ejecutar todo el sistema, lo cual es ideal para su integración a través de una API. De esta forma, se evita depender de notebooks o archivos extensos y poco escalables.\nEl sistema se construyó utilizando principalmente la librería LangChain, la cual ofrece una base robusta para conectar modelos de lenguaje con herramientas externas y flujos personalizados.\n\n\n\nA diferencia de los modelos clásicos de machine learning (ML), la evaluación de sistemas basados en modelos de lenguaje grande (LLMs) requiere enfoques distintos, centrados en la calidad de las respuestas generadas.\nEn este proyecto, la evaluación se realiza mediante un análisis cualitativo de las respuestas del chatbot, tomando en cuenta los siguientes criterios:\n\nLa información sobre productos, descripciones y características debe estar alineada con los datos disponibles en la base vectorial.\nLas respuestas deben ser claras, concisas y coherentes, evitando alucinaciones o información incorrecta.\nLos precios deben coincidir con los establecidos en la base de datos, y en el caso de promociones, estas deben estar correctamente aplicadas, evitando errores que impliquen pérdidas económicas.\n\nEstos criterios serán evaluados por los expertos y personas con conocimiento en la empresa."
  },
  {
    "objectID": "modelado.html#evaluación",
    "href": "modelado.html#evaluación",
    "title": "Modelado y Evaluación",
    "section": "2 Evaluación",
    "text": "2 Evaluación\nCon base en las respuestas generadas durante la etapa de modelado, se llevó a cabo una evaluación cualitativa para analizar la coherencia, relevancia y precisión de las recomendaciones de cada modelo. Este análisis nos permitió identificar oportunidades de mejora en el sistema, así como validar si el comportamiento del modelo es adecuado para continuar con su implementación o si requiere ajustes adicionales.\nA continuación, se presentan las respuestas generadas por el sistema para una serie de consultas simuladas por un usuario. Estas imágenes muestran el resultado del mejor modelo seleccionado (GPT 4o) ante cada solicitud:\n\nConsulta: “¡Hola! Me interesan computadoras de oficina”\n\nConsulta: “También me gustaría ver monitores de 27 pulgadas arriba de 75Hz”\n\nConsulta: “Y un no break gamer”\n\nConsulta: “Y una extensión doméstica”\n\n\nLos resultados obtenidos reflejan un desempeño sólido por parte del sistema. En todos los casos evaluados, las respuestas del chatbot fueron coherentes, alineadas con la base de datos y cumplieron con los criterios definidos:\n\nLas ofertas y promociones fueron correctamente identificadas y presentadas.\nLos precios y descripciones de los productos coincidieron con los datos reales.\nNo se observaron errores de alucinación ni pérdidas de coherencia en la conversación.\n\nEsto sugiere que el modelo es capaz de generar respuestas confiables y útiles para los usuarios, por lo que se considera viable continuar con las siguientes etapas del proyecto o bien escalar el sistema hacia una versión de prueba."
  }
]